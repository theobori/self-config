- name: Install base packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: yes
  loop:
    - "{{ xz }}"
    - gcc
    - curl

- name: Check if nix is already installed
  ansible.builtin.shell: |
    which nix && which nix-env
  ignore_errors: yes
  register: has_nix

- name: Check if the /nix exists
  ansible.builtin.stat:
    path: /nix
  register: root_nix

- name: Creating /nix if not exists (for the user)
  ansible.builtin.file:
    path: /nix
    state: directory
    mode: 0755
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: yes
  when: root_nix.stat.exists == false

- name: Download and run the Nix install script
  ansible.builtin.shell: |
    curl -L https://nixos.org/nix/install | bash -s -- --daemon --yes
  when: has_nix.rc == 1

- name: Add Nix profile to shell configuration
  ansible.builtin.lineinfile:
    dest: $HOME/.bashrc
    line: "source $HOME/.nix-profile/etc/profile.d/nix.sh"
  when: has_nix.rc == 1

- name: Add a cross user environment variable
  ansible.builtin.shell: |
    echo "PATH=$PATH:$HOME/.nix-profile/bin:/home/{{ ansible_user }}/.nix-profile/bin" > /etc/environment
  become: yes
  when: has_nix.rc == 1

- name: Reset connection to refresh the environment variables
  meta: reset_connection

- name: Check if the nix configuration directory exists
  ansible.builtin.stat:
    path: $HOME/.config/nix
  register: nix_dir

- name: Create nix configuration directory
  ansible.builtin.file:
    path: $HOME/.config/nix
    state: directory
    mode: 0755
    recurse: yes
  when: nix_dir.stat.exists == false

- name: Add Nix configuration file
  ansible.builtin.lineinfile:
    dest: $HOME/.config/nix/nix.conf
    line: experimental-features = nix-command flakes
    create: yes

- name: Install base packages via nix
  ansible.builtin.shell: nix-env -iA nixpkgs.{{ item }}
  loop:
    - git
    - gnumake
    - python310
    - python310Packages.pip
